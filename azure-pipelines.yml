jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-latest'
  # We use a container to run the build as we must be compatible with centos7's older glibc
  container: rockdreamer/centos7-gcc9:latest
  steps:
  # No need to setup specific python, the container's python3 will be used
  - task: PythonScript@0
    inputs:
      scriptSource: 'filePath'
      scriptPath: build_protobuf.py
    displayName: 'Create protobuf build'
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'protobuf'
      publishLocation: 'Container'

- job: macOS
  pool:
    vmImage: 'macOS-latest'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
  - task: PythonScript@0
    inputs:
      scriptSource: 'filePath'
      scriptPath: build_protobuf.py
    displayName: 'Create protobuf build'
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'protobuf'
      publishLocation: 'Container'

- job: Windows VS2017
  pool:
    vmImage: 'vs2017-win2016'
  variables:
    build_vs_version: '2017'  
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
  - task: PythonScript@0
    inputs:
      scriptSource: 'filePath'
      scriptPath: build_protobuf.py
    displayName: 'Create protobuf build'
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'protobuf'
      publishLocation: 'Container'

- job: Windows VS2019
  pool:
    vmImage: 'vs2019-win2019'
  variables:
    build_vs_version: '2019'  
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
  - task: PythonScript@0
    inputs:
      scriptSource: 'filePath'
      scriptPath: build_protobuf.py
    displayName: 'Create protobuf build'
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'protobuf'
      publishLocation: 'Container'
